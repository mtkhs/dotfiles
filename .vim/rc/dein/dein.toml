[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
#on_cmd = 'Denite'
depends = [ 'neomru.vim' ]

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_fixers = {
    \ 'ruby': [ 'rubocop' ],
    \ 'python': [ 'pycodestyle' ],
    \ 'javascript': [ 'eslint' ],
    \ 'css': [ 'stylelint' ],
    \ 'scss': [ 'stylelint' ],
    \ 'typescript': [ 'prettier' ],
    \ 'less': [ 'prettier' ],
    \ 'json': [ 'prettier' ],
    \ 'markdown': [ 'prettier' ],
\}
let g:ale_linters = {
    \ 'ruby': [ 'rubocop' ],
    \ 'python': [ 'pyflakes', 'black', 'isort' ],
    \ 'javascript': [ 'eslint', 'eslint-plugin-vue' ],
    \ 'tex': [ 'textlint' ],
    \ 'markdown': [ 'write-good' ],
    \ 'css': [ 'stylelint' ],
    \ 'scss': [ 'stylelint' ],
    \ 'html': [ 'htmlhint' ],
\ }
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 0
let g:ale_lint_on_text_changed = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
"highlight clear ALEErrorSign
"highlight clear ALEWarningSign
let g:ale_statusline_format = [ 'E%d', 'W%d', 'ok' ]
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_fix_on_save = 0
let g:ale_echo_msg_format = '[%linter%] %code: %%s'

"let g:ale_javascript_prettier_options = '--single-quote --trailing-comma es5'

"nmap <silent> <C-n> <Plug>(ale_next_wrap)
nmap <silent> <C-N> <Plug>(ale_next)
nmap <silent> <C-P> <Plug>(ale_previous)
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 0
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '

let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
let g:DevIconsDefaultFolderOpenSymbol = ''

let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
      \ 'fcgi':     '',
      \ 'perl':     '',
      \ 'sqlite':   '',
      \ 'tt':       '',
      \ 'vue':      '',
      \ 'html':     '',
      \ 'css':      '',
      \ 'md':       '',
      \ 'txt':      ''
      \ }
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = [ 'context_filetype.vim', 'vim-textobj-user' ]
hook_add = '''
let g:context_filetype#filetypes = {
    \ 'sh': [
    \   {
    \    'start': '[^<]<<\([\\''"]\?\)\([a-zA-Z0-9]\+\)\1$',
    \    'end': '^\2$', 'filetype': '\2',
    \   },
    \ ],
    \}
'''

[[plugins]] # for <Plug>(textobj-precious-i) in vim-precious
repo = 'kana/vim-textobj-user'

[[plugins]]
repo     = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_silent_chdir = 1
'''

#[[plugins]]
#repo = 'scrooloose/nerdtree'
#hook_add = '''
#let g:NERDTreeDirArrows = 1
#let NERDTreeShowHidden = 1
#let NERDTreeWinSize = 22
#"let g:NERDTreeDirArrowExpandable = '+'
#"let g:NERDTreeDirArrowCollapsible = '~'
#'''

#[[plugins]]
#repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
#hook_add = '''
#let s:rspec_red = 'FE405F'
#let s:git_orange = 'F54D27'
#let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
#let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files
#let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
#let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red " sets the color for files ending with _spec.rb
#'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" # hide --INSERT--
set noshowmode

let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ],
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]
    \   ]
    \ },
    \ 'tabline': {
    \   'left': [ [ 'bufferinfo' ],
    \             [ 'separator' ],
    \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ],
    \   ],
    \   'right': []
    \ },
    \ 'component_expand': {
    \   'linter_checking': 'lightline#ale#checking',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \   'buffercurrent': 'lightline#buffer#buffercurrent',
    \   'bufferbefore': 'lightline#buffer#bufferbefore',
    \   'bufferafter': 'lightline#buffer#bufferafter',
    \ },
    \ 'component_type': {
    \   'linter_checking': 'left',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'left',
    \   'buffercurrent': 'tabsel',
    \   'bufferbefore': 'raw',
    \   'bufferafter': 'raw',
    \ },
    \ 'component_function': {
    \   'bufferinfo': 'lightline#buffer#bufferinfo',
    \ },
"    \ 'separator': { 'left': '', 'right': '' },
"    \ 'subseparator': { 'left': '|', 'right': '|' }
\ }

function! LightlineTabFilename(n) abort
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let _ = pathshorten(expand('#'.buflist[winnr - 1].':f'))
  return _ !=# '' ? _ : '[No Name]'
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = [ 'lightline.vim', 'ale' ]

[[plugins]]
repo = 'taohexxx/lightline-buffer'
depends = [ 'lightline.vim' ]

#
# TableMode
# VIM Table Mode for instant table creation.
#
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
let g:table_mode_corner = '|'
'''

#
# Seiya
# Clear and make transparent vim's background color in terminal
#
[[plugins]]
repo = 'miyakogi/seiya.vim'
hook_add = '''
let g:seiya_auto_enable = !has('gui_running')
'''

#
# Japanesque
# The colorscheme featuring Japanese traditional colors.<Paste>
#
[[plugins]]
repo = 'aereal/vim-colors-japanesque'
hook_add = '''
"au MyAutoCmd VimEnter * nested colorscheme japanesque
'''

